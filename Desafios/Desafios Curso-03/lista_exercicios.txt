(02)
1) Construindo a estrutura HTML do portfólio
Você acaba de receber um layout de uma página de portfólio da sua designer. O desafio é transformar esse design em uma página web funcional. Utilizando HTML, crie a estrutura básica da página. Lembre-se de incluir os elementos principais: um título principal, um subtítulo, dois botões (Instagram e Github), e um espaço para a imagem da desenvolvedora. Sinta-se livre para personalizar o texto e a imagem para adaptá-los ao seu portfólio pessoal.

2) Estruturando a página com tags semânticas
Agora que você entende a importância das tags semânticas no HTML, é hora de aplicar esse conhecimento. Utilize as tags header, main, e footer para estruturar sua página de portfólio. No header, insira um menu ou um logotipo. No main, adicione os elementos do portfólio como título, parágrafo, botões e imagem. Por fim, no footer, coloque informações como contato ou direitos autorais. Lembre-se de que cada elemento deve ser colocado de forma lógica e estruturada para criar um site acessível e bem organizado.

3) Entendendo e aplicando as tags meta
Explore o uso das tags meta no cabeçalho do seu HTML. Altere a tag lang para "pt-br", ajuste o charset para "UTF-8", adicione a tag meta para compatibilidade com o Edge e outra para configuração do viewport. Por fim, mude o título da sua página para algo relacionado ao seu projeto, por exemplo, "Portfólio de [Seu Nome]". Entenda como cada uma dessas mudanças afeta a funcionalidade e a acessibilidade do seu site.

4) Inserindo e formatando elementos no HTML
Agora que você já tem uma base sólida sobre a estrutura HTML, vamos adicionar e formatar elementos na sua página de portfólio. Siga o layout do Figma e comece adicionando um título (<h1>) com um destaque (<strong>) em uma parte dele. Em seguida, insira um parágrafo (<p>) com uma breve introdução sobre você ou sua empresa. Finalmente, adicione links (<a>) para suas redes sociais ou portfólios online, como Instagram e GitHub. Certifique-se de que cada elemento esteja corretamente formatado e colocado conforme o design do Figma.

5) Incorporando imagens com tags HTML
Chegou a hora de dar um toque visual à sua página! Escolha uma imagem que represente você ou seu trabalho e adicione-a à sua página de portfólio usando a tag <img>. Lembre-se de incluir a propriedade src com o caminho para a imagem e alt com uma descrição adequada da imagem. Isso não apenas melhora a acessibilidade do seu site, mas também ajuda os motores de busca a entenderem o conteúdo da imagem.

(03)
1) Criando e linkando o arquivo CSS
Você vai criar um arquivo CSS chamado style.css para estilizar uma página web. Após criar o arquivo, seu objetivo é linkar esse arquivo CSS ao HTML. Para isso, você usará a tag <link> dentro do <head> do documento HTML, especificando o caminho do arquivo CSS. Este processo é crucial para que os estilos definidos no CSS sejam aplicados à página HTML.

2) Definindo estilos básicos
No arquivo CSS, defina a cor de fundo do corpo da página (<body>) para indigo (indigo) e a cor do texto para branco (white). Salve as alterações e verifique no navegador se o fundo da página está na cor indigo (entre o violeta e o azul) e o texto branco.

3) Estilizando com cores e formatos
Você recebeu o desafio de dar vida a uma página web que atualmente tem apenas HTML. Sua tarefa é utilizar CSS para adicionar cores e formatos aos elementos da página, inspirando-se em um design específico fornecido no Figma. Foque em selecionar cores adequadas para os fundos, textos e bordas, além de aplicar estilos aos botões e cabeçalhos para torná-los visualmente atraentes. Você pode usar como referência essa tabela de nomes de cores.

4) Personalizando a página com CSS
Imagine que você está trabalhando em um projeto web e chegou o momento de dar vida à sua página com cores, formas e estilos. Sua tarefa é criar um arquivo CSS para estilizar uma página HTML simples, a qual contém um cabeçalho, um parágrafo e um rodapé. Use seu conhecimento para definir as cores do texto e do fundo.

5) Aplicando estilos com CSS
Agora, vamos um pouco além. Você precisa criar três arquivos CSS diferentes, cada um com um estilo único, para o mesmo arquivo HTML. Isso demonstrará como o CSS pode drasticamente mudar a aparência de uma página sem alterar o HTML. Crie estilos variados para os elementos da página - um arquivo com um estilo formal e elegante, outro com um estilo colorido e divertido, e um terceiro com um visual minimalista e limpo.

6) Personalizando Links
A última tarefa é estilizar os links na página. Você deverá modificar a aparência dos links para que se destaquem do fundo e do texto. Utilize as propriedades CSS, como colorpara personalizá-los, seguindo as diretrizes do design fornecido no Figma.

(Para saber mais: destacando o texto)

Você aprendeu a destacar o texto utilizando a tag <strong>, porém existe outra tag que também é muito utilizada para isso que é a tag <span>, diferente da strong a span não deixa em negrito por padrão, mas é uma ótima forma de marcar trechos do texto em HTML. Veja:

HTML:

<h1>Formação de <span>Front-end</span></h1>

CSS:

h1{
            font-weight: bold;
}
 
span{
            color: #22D4FD;
            border: 1px solid #22D4FD;
            padding: 10px;
}

Explicando o código acima:

font-weight: bold; (Texto em negrito)

color: #22D4FD; (Cor do texto azul)

border: 1px solid #22D4FD; (Borda com 1 px de largura, do tipo sólida e cor da borda azul)

padding: 10px; (Espaçamento interno de 10px)

(04)

1) Harmonia de cores no CSS
Imagine que você está trabalhando no desenvolvimento de um site pessoal. Utilize a Roda de Cores da Adobe para criar uma paleta de cores harmoniosa. Escolha uma cor principal e duas cores secundárias para o seu site. Em seguida, aplique essas cores no arquivo style.css do seu projeto, usando a cor principal para o background-color e as cores secundárias para o color de dois tipos diferentes de texto (por exemplo, títulos e parágrafos).

2) Identificando e corrigindo erros de cores no CSS
Você ficou responsável por corrigir um erro em um projeto web onde o texto não está visível devido a um problema de cor. O corpo da página está com background-color: #000000; e o color do texto foi definido como black, tornando-o invisível. Sua tarefa é corrigir esse erro alterando o valor de color para uma cor visível, como #F6F6F6 ou outra cor clara, garantindo a legibilidade do texto.

3) Jogando com cores RGB no CSS
Vamos experimentar a representação de cores em RGB no CSS. Escolha duas cores que você goste, uma para o fundo (background-color) e outra para o texto (color). Use a notação hexadecimal RGB para definir essas cores no arquivo style.css. Por exemplo, você pode usar #FF5733 para uma cor laranja vibrante e #00FF00 para um verde brilhante. Aplique essas cores no corpo da sua página e veja como elas interagem.